generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  ext_expires_in    Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String       @id @default(cuid())
  firstName       String?
  lastName        String?
  headline        String?
  education       Education[]
  jobs            Job[]
  connections     Connection[] @relation("UserFriends")
  connectionOf    Connection[] @relation("FriendsUser")
  posts           Post[]
  commments       Comment[]
  likes           Like[]
  bio             String?      @db.Text
  volunteering    String? // TODO: Change to volunteering model
  skills          String? // TODO: Create skills table
  recommendations String? // TODO: Create recommendations table
  courses         String? // TODO: Create courses table
  projects        String? // TODO: Create projects table
  awards          String? // TODO: Create awards table
  languages       String? // TODO: Create languages table
  email           String       @unique
  emailVerified   DateTime?
  phone           String?      @unique
  image           String?      @db.Text
  accounts        Account[]
  sessions        Session[]
  PostedJobs      JobPosting[]
  Applications    Application[]
  savedJobPostings SavedJobPosting[]
  appliedJobPostings AppliedJobPosting[]
  password        String?
  notifications   Notification[]
  sentNotifications Notification[] @relation("Sender")
  mutedNotifTypes MutedNotificationTypes[]
  DirectMessages   DirectMessages[]
  MessagesTo       Messages[]       @relation("Sender")
}

model Connection {
  user1Id          String
  user2Id          String
  connectionStatus ConnectionStatus
  user1            User             @relation("UserFriends", fields: [user1Id], references: [id], onDelete: Cascade)
  user2            User             @relation("FriendsUser", fields: [user2Id], references: [id], onDelete: Cascade)

  @@id([user1Id, user2Id])
}

model Job {
  jobId       String    @id @default(cuid())
  userId      String
  title       String
  company     String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  description String?   @db.Text
  User        User      @relation(fields: [userId], references: [id])
}

model DirectMessages {
  id       String     @id @default(uuid())
  users    User[]
  messages Messages[] @relation("Messages")
}

model Messages {
    id             String         @id @default(uuid())
    message        String
    sender         User           @relation("Sender", fields: [senderId], references: [id])
    senderId       String
    createdAt      DateTime       @default(now())
    conversationId String
    DirectMessages DirectMessages @relation("Messages", fields: [conversationId], references: [id])
    embeddedPostId String?
    embeddedPost Post? @relation("Embed", fields: [embeddedPostId], references: [id])
    isFile         Boolean        @default(false)
}

model Education {
  educationId String    @id @default(cuid())
  userId      String
  school      String
  location    String?
  degree      String
  startDate   DateTime
  endDate     DateTime?
  description String?   @db.Text
  User        User      @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
    id        String   @id @default(cuid())
    userId    String
    createdAt DateTime @default(now())
    content   String?  @db.Text
    comments  Comment[]
    likes     Like[]
    User      User     @relation(fields: [userId], references: [id])
    messagesEmbed Messages[] @relation("Embed")
    hasFiles Boolean @default(false)
}

model Comment {
  commentId String  @id @default(cuid())
  userId    String
  postId    String
  content   String? @db.Text
  Post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  likeId String @id @default(cuid())
  userId String
  postId String
  Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobPosting {
  jobPostingId    String   @id @default(cuid())
  recruiterId    String   
  createdAt DateTime @default(now())
  jobTitle  String
  company   String
  location  String?
  jobType   jobType
  workplaceType workplaceType
  description String? @db.Text
  jobSkills String? @db.Text
  applicationLink String? @db.Text
  requireResume Boolean @default(false)
  requireCoverLetter Boolean @default(false)
  requirePortfolio Boolean @default(false)
  requireTranscript Boolean @default(false)
  applications Application []
  savedJobPostings SavedJobPosting []
  appliedJobPostings AppliedJobPosting []
  recruiter      User     @relation(fields: [recruiterId], references: [id]) //this will be the recruiters user Id since he/she's in charge of creating a Job Posting
}

model SavedJobPosting {
  userId       String
  jobPostingId String
  User         User       @relation(fields: [userId], references: [id])
  JobPosting   JobPosting @relation(fields: [jobPostingId], references: [jobPostingId])

  @@id([userId, jobPostingId])
}

model Application {
  applicationId String     @id @default(cuid())
  userId        String
  jobPostingId  String
  resume        String?    @db.Text
  coverLetter   String?    @db.Text
  portfolio     String?    @db.Text
  transcript    String?    @db.Text
  User          User       @relation(fields: [userId], references: [id])
  JobPosting    JobPosting @relation(fields: [jobPostingId], references: [jobPostingId])
}

model MutedNotificationTypes {
  userId String
  type   NotificationType
  User   User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, type])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  senderId  String
  createdAt DateTime         @default(now())
  content   String?          @db.Text
  seen      Boolean          @default(false)
  type      NotificationType
  route     String?          @db.Text
  Sender    User             @relation("Sender", fields: [senderId], references: [id])
  User      User             @relation(fields: [userId], references: [id])
}
model AppliedJobPosting {
    userId String
    jobPostingId String
    User User @relation(fields: [userId], references: [id])
    JobPosting JobPosting @relation(fields: [jobPostingId], references: [jobPostingId])
    @@id([userId, jobPostingId])
}

enum jobType {
  Internship
  PartTime
  FullTime
  Contract
  Volunteer
  Temporary
}

enum workplaceType {
  Remote
  Onsite
  Hybrid
}

enum ConnectionStatus {
  Pending_1_To_2
  Pending_2_To_1
  Connected
  Blocked
}

// Added types for filtering, could potentially add more if needed
enum NotificationType {
  ConnectionRequest
  ConnectionResponse
  ConnectionAccepted
  Like
  Comment
}
