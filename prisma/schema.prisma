generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["filteredRelationCount"]
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    ext_expires_in    Int?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String       @id @default(cuid())
    firstName       String?
    lastName        String?
    headline        String?
    education       Education[]
    jobs            Job[]
    connections     Connection[] @relation("UserFriends")
    connectionOf    Connection[] @relation("FriendsUser")
    posts           Post[]
    commments       Comments[]
    likes           Likes[]
    bio             String?      @db.Text
    volunteering    String? // TODO: Change to volunteering model
    skills          String? // TODO: Create skills table
    recommendations String? // TODO: Create recommendations table
    courses         String? // TODO: Create courses table
    projects        String? // TODO: Create projects table
    awards          String? // TODO: Create awards table
    languages       String? // TODO: Create languages table
    email           String       @unique
    emailVerified   DateTime?
    phone           String?      @unique
    image           String?      @db.Text
    accounts        Account[]
    sessions        Session[]
    password        String?
    DirectMessages   DirectMessages[]
    MessagesTo       Messages[]       @relation("Sender")
}

model Connection {
    user1Id          String
    user1            User             @relation("UserFriends", fields: [user1Id], references: [id])
    user2Id          String
    user2            User             @relation("FriendsUser", fields: [user2Id], references: [id])
    connectionStatus ConnectionStatus

    @@id([user1Id, user2Id])
}

model Job {
    jobId       String    @id @default(cuid())
    userId      String
    title       String
    company     String
    location    String?
    startDate   DateTime
    endDate     DateTime?
    description String?   @db.Text
    User        User      @relation(fields: [userId], references: [id])
}

model DirectMessages {
    id       String     @id @default(uuid())
    users    User[]
    messages Messages[] @relation("Messages")
}

model Messages {
    id             String         @id @default(uuid())
    message        String
    sender         User           @relation("Sender", fields: [senderId], references: [id])
    senderId       String
    createdAt      DateTime       @default(now())
    conversationId String
    DirectMessages DirectMessages @relation("Messages", fields: [conversationId], references: [id])
    embeddedPostId String?
    embeddedPost Post? @relation("Embed", fields: [embeddedPostId], references: [id])
}

model Education {
    educationId String    @id @default(cuid())
    userId      String
    school      String
    location    String?
    degree      String
    startDate   DateTime
    endDate     DateTime?
    description String?   @db.Text
    User        User      @relation(fields: [userId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id        String   @id @default(cuid())
    userId    String
    createdAt DateTime @default(now())
    content   String?  @db.Text
    comments  Comments[]
    likes     Likes[]
    User      User     @relation(fields: [userId], references: [id])
    messagesEmbed Messages[] @relation("Embed")
}

model Comments {    
    commentId String @id @default(cuid())
    userId    String
    postId    String
    content   String? @db.Text
    Post      Post    @relation(fields: [postId], references: [id])
    User      User    @relation(fields: [userId], references: [id])
}

model Likes {
    likeId String @id @default(cuid())
    userId String
    postId String
    Post   Post   @relation(fields: [postId], references: [id])
    User   User    @relation(fields: [userId], references: [id])
    
}

enum ConnectionStatus {
    Pending_1_To_2
    Pending_2_To_1
    Connected
    Blocked
}


